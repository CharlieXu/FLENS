CXX      = clang++
CXXFLAGS = -I ../.. -Wall


CBLAS_INT = int
BU        = _

BLAS_SDCZ   = copy swap axpy scal
BLAS_iSDCZ  = amax
BLAS_SD     = dot rot rotg nrm2 asum
BLAS_CZ     = dotu dotc
BLAS_sCdZ   = nrm2 asum
BLAS_CsZd   = scal


BLAS_OBJ =  $(patsubst %,s%.o,$(BLAS_SDCZ) $(BLAS_SD)) \
            $(patsubst %,d%.o,$(BLAS_SDCZ) $(BLAS_SD)) \
            $(patsubst %,c%.o,$(BLAS_SDCZ) $(BLAS_CZ)) \
            $(patsubst %,z%.o,$(BLAS_SDCZ) $(BLAS_CZ)) \
            $(patsubst %,is%.o,$(BLAS_iSDCZ)) \
            $(patsubst %,id%.o,$(BLAS_iSDCZ)) \
            $(patsubst %,ic%.o,$(BLAS_iSDCZ)) \
            $(patsubst %,iz%.o,$(BLAS_iSDCZ)) \
            $(patsubst %,sc%.o,$(BLAS_sCdZ)) \
            $(patsubst %,dz%.o,$(BLAS_sCdZ)) \
            $(patsubst %,cs%.o,$(BLAS_CsZd)) \
            $(patsubst %,zd%.o,$(BLAS_CsZd)) 

CBLAS_OBJ = $(patsubst %,cblas_%,$(BLAS_OBJ))

BLAS_OPTION = -DCREATE_BLAS -UCREATE_CBLAS \
              -DBLAS_NAME=<tchar>$(*F)$(BU) -DCBLAS_NAME=cblas_<tchar>$(*F) \
              -<complex1>COMPLEX_FLOAT1 -<complex2>COMPLEX_FLOAT2 \
              -DCBLAS_FLOAT=<type> -DCBLAS_INT=$(CBLAS_INT) \
              -o <tchar>$(*F).o

CBLAS_OPTION = -UCREATE_BLAS -DCREATE_CBLAS \
               -DCBLAS_NAME=cblas_<tchar>$(*F) \
               -DCBLAS_FLOAT=<ctype1> -DCBLAS_FLOAT1=<ctype1> -DCBLAS_FLOAT2=<ctype2> \
               -<complex1>COMPLEX_FLOAT1 -<complex2>COMPLEX_FLOAT2 \
               -DCXXBLAS_FLOAT=<cxxtype1> -DCXXBLAS_FLOAT1=<cxxtype1> -DCXXBLAS_FLOAT2=<cxxtype2> \
               -DCBLAS_INT=$(CBLAS_INT) \
               -o cblas_<tchar>$(*F).o


s_BLAS_OPTION = $(subst \
                    <type>,float,$(subst \
                    <tchar>,s,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(BLAS_OPTION)))))
d_BLAS_OPTION = $(subst \
                    <type>,double,$(subst \
                    <tchar>,d,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(BLAS_OPTION)))))
c_BLAS_OPTION = $(subst \
                    <type>,float,$(subst \
                    <tchar>,c,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(BLAS_OPTION)))))
z_BLAS_OPTION = $(subst \
                    <type>,double,$(subst \
                    <tchar>,z,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(BLAS_OPTION)))))


s_CBLAS_OPTION = $(subst \
                    <ctype1>,float,$(subst \
                    <ctype2>,float,$(subst \
                    <cxxtype1>,float,$(subst \
                    <cxxtype2>,float,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(subst \
                    <tchar>,s,$(CBLAS_OPTION))))))))
d_CBLAS_OPTION = $(subst \
                    <ctype1>,double,$(subst \
                    <ctype2>,double,$(subst \
                    <cxxtype1>,double,$(subst \
                    <cxxtype2>,double,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(subst \
                    <tchar>,d,$(CBLAS_OPTION))))))))
c_CBLAS_OPTION = $(subst \
                    <ctype1>,float,$(subst \
                    <ctype2>,float,$(subst \
                    <cxxtype1>,"std::complex<float>",$(subst \
                    <cxxtype2>,"std::complex<float>",$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(subst \
                    <tchar>,c,$(CBLAS_OPTION))))))))
z_CBLAS_OPTION = $(subst \
                    <ctype1>,double,$(subst \
                    <ctype2>,double,$(subst \
                    <cxxtype1>,"std::complex<double>",$(subst \
                    <cxxtype2>,"std::complex<double>",$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(subst \
                    <tchar>,z,$(CBLAS_OPTION))))))))


is_BLAS_OPTION = $(subst \
                    <type>,float,$(subst \
                    <tchar>,is,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(BLAS_OPTION)))))
id_BLAS_OPTION = $(subst \
                    <type>,double,$(subst \
                    <tchar>,id,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(BLAS_OPTION)))))
ic_BLAS_OPTION = $(subst \
                    <type>,float,$(subst \
                    <tchar>,ic,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(BLAS_OPTION)))))
iz_BLAS_OPTION = $(subst \
                    <type>,double,$(subst \
                    <tchar>,iz,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(BLAS_OPTION)))))

is_CBLAS_OPTION = $(subst \
                    <ctype1>,float,$(subst \
                    <ctype2>,float,$(subst \
                    <cxxtype1>,float,$(subst \
                    <cxxtype2>,float,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(subst \
                    <tchar>,is,$(CBLAS_OPTION))))))))
id_CBLAS_OPTION = $(subst \
                    <ctype1>,double,$(subst \
                    <ctype2>,double,$(subst \
                    <cxxtype1>,double,$(subst \
                    <cxxtype2>,double,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,U,$(subst \
                    <tchar>,id,$(CBLAS_OPTION))))))))
ic_CBLAS_OPTION = $(subst \
                    <ctype1>,float,$(subst \
                    <ctype2>,float,$(subst \
                    <cxxtype1>,"std::complex<float>",$(subst \
                    <cxxtype2>,"std::complex<float>",$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(subst \
                    <tchar>,ic,$(CBLAS_OPTION))))))))
iz_CBLAS_OPTION = $(subst \
                    <ctype1>,double,$(subst \
                    <ctype2>,double,$(subst \
                    <cxxtype1>,"std::complex<double>",$(subst \
                    <cxxtype2>,"std::complex<double>",$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,D,$(subst \
                    <tchar>,iz,$(CBLAS_OPTION))))))))


sc_BLAS_OPTION = $(subst \
                    <type>,float,$(subst \
                    <tchar>,sc,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,D,$(BLAS_OPTION)))))
dz_BLAS_OPTION = $(subst \
                    <type>,double,$(subst \
                    <tchar>,dz,$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,D,$(BLAS_OPTION)))))


sc_CBLAS_OPTION = $(subst \
                    <ctype1>,float,$(subst \
                    <ctype2>,float,$(subst \
                    <cxxtype1>,"float",$(subst \
                    <cxxtype2>,"std::complex<float>",$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,D,$(subst \
                    <tchar>,sc,$(CBLAS_OPTION))))))))
dz_CBLAS_OPTION = $(subst \
                    <ctype1>,double,$(subst \
                    <ctype2>,double,$(subst \
                    <cxxtype1>,"double",$(subst \
                    <cxxtype2>,"std::complex<double>",$(subst \
                    <complex1>,U,$(subst \
                    <complex2>,D,$(subst \
                    <tchar>,dz,$(CBLAS_OPTION))))))))


cs_BLAS_OPTION = $(subst \
                    <type>,float,$(subst \
                    <tchar>,cs,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,U,$(BLAS_OPTION)))))
zd_BLAS_OPTION = $(subst \
                    <type>,double,$(subst \
                    <tchar>,zd,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,U,$(BLAS_OPTION)))))


cs_CBLAS_OPTION = $(subst \
                    <ctype1>,float,$(subst \
                    <ctype2>,float,$(subst \
                    <cxxtype1>,"std::complex<float>",$(subst \
                    <cxxtype2>,float,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,U,$(subst \
                    <tchar>,cs,$(CBLAS_OPTION))))))))
zd_CBLAS_OPTION = $(subst \
                    <ctype1>,double,$(subst \
                    <ctype2>,double,$(subst \
                    <cxxtype1>,"std::complex<double>",$(subst \
                    <cxxtype2>,double,$(subst \
                    <complex1>,D,$(subst \
                    <complex2>,U,$(subst \
                    <tchar>,zd,$(CBLAS_OPTION))))))))


all : $(BLAS_OBJ) $(CBLAS_OBJ)
	ar ru libblas.a $(BLAS_OBJ)
	ar ru libcblas.a $(CBLAS_OBJ)

s%.o cblas_s%.o : %.cc
	$(CXX) $(CXXFLAGS) $(s_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(s_CBLAS_OPTION) -c $<

d%.o cblas_d%.o : %.cc
	$(CXX) $(CXXFLAGS) $(d_CBLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(d_BLAS_OPTION) -c $<

c%.o cblas_c%.o : %.cc
	$(CXX) $(CXXFLAGS) $(c_CBLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(c_BLAS_OPTION) -c $<

z%.o cblas_z%.o: %.cc
	$(CXX) $(CXXFLAGS) $(z_CBLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(z_BLAS_OPTION) -c $<

is%.o cblas_is%.o : %.cc
	$(CXX) $(CXXFLAGS) $(is_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(is_CBLAS_OPTION) -c $<

id%.o cblas_id%.o : %.cc
	$(CXX) $(CXXFLAGS) $(id_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(id_CBLAS_OPTION) -c $<

ic%.o cblas_ic%.o : %.cc
	$(CXX) $(CXXFLAGS) $(ic_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(ic_CBLAS_OPTION) -c $<

iz%.o cblas_iz%.o : %.cc
	$(CXX) $(CXXFLAGS) $(iz_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(iz_CBLAS_OPTION) -c $<

sc%.o cblas_sc%.o : %.cc
	$(CXX) $(CXXFLAGS) $(sc_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(sc_CBLAS_OPTION) -c $<

dz%.o cblas_dz%.o : %.cc
	$(CXX) $(CXXFLAGS) $(dz_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(dz_CBLAS_OPTION) -c $<

cs%.o cblas_cs%.o : %.cc
	$(CXX) $(CXXFLAGS) $(cs_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(cs_CBLAS_OPTION) -c $<

zd%.o cblas_zd%.o : %.cc
	$(CXX) $(CXXFLAGS) $(zd_BLAS_OPTION) -c $<
	$(CXX) $(CXXFLAGS) $(zd_CBLAS_OPTION) -c $<

clean :
	rm -f *.o *.a

