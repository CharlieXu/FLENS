===========================
FLENS-LAPACK Implementation                                             [TOC]
===========================

*FLENS* follows the philosophy of *extending a programming language through
libraries*.  And in this case we extend C++ for features (e.g. different
matrix/vector types, storage schemes ...) that are useful and crucial for
the implementation of numerical algorithms.

At the moment we are working on a C++ port of *LAPACK*.  Sound tedious?  It
is a joy with *FLENS*!


Obtain
======

Current Status
==============
While it is a joy to port LAPACK to C++ we are still far from complete.  And
as we require that the resulting implementation is readable and understandable
we can not completely automate the process:

  - The Fortran implementation of LAPACK uses a lot of `goto` statements.  In
    our implementation we try to avoid them were possible and appropriate.
  - ... and other reasons.

At the moment we focus on porting LAPACK routines were data types are real and
the involved matrix types have full storage:

  - We picked LAPACK routines for double precision and turned them in generic
    C++ code that uses FLENS matrix/vector types.  While they should also work
    in single and multi-precision we have not tested this so far.
  - Involved FLENS matrix types are `GeMatrix`, `TrMatrix` and `SyMatrix`
    and FLENS vector type `DenseVector`.
  - As the LAPACK naming is well known we stick with it in our port.  However,
    we removed letters from the function names that merely specify the argument
    types.  For example, the LAPACK functions __dgetrs__ and __dtrtrs__ resulted
    in the FLENS-LAPACK function __trs__ which is overloaded for `GeMatrix` and
    `TrMatrix`.
  - All LAPACK routines are located in __flens/lapack__ directory and loosely
    grouped in subdiretories:
     - __aux__ contains various auxiliary routines
     - __eig__ contains routines most relevant for the computation of
       eigenvalues and eigenvectors,
     - __gesv__ for solving systems of linear equations and
     - __qr__ for computing the QR factorization.

:links:  __dgetrs__        -> file:flens/lapack/interface/ref_lapack/dgetrs.f
         __dtrtrs__        -> file:flens/lapack/interface/ref_lapack/dtrtrs.f
         __trs__           -> file:flens/lapack/gesv/trs.h
         __flens/lapack__  -> dir:flens/lapack/
         __(.+)__          -> dir:flens/lapack/$1/

But before you get lost in the details you might be interested in the following
LAPACK driver routines that are currently implemented in FLENS.

Linear Equation Routines
------------------------
 +----------+-----------+----------------------------------------+------------+
 | TYPE     | FLENS     | DESCRIPTION                            | LAPACK     |
 +==========+===========+========================================+============+
 | General  | __sv__    | Solves a general system of linear      | __dgesv__  |
 |          |           | equations $AX=B$.                      |            |
 +          +-----------+----------------------------------------+------------+
 |          | __svx__   | Solves a general system of linear      | __dgesvx__ |
 |          |           | equations $AX=B$.  Error bounds on     |            |
 |          |           | the solution and a condition estimate  |            |
 |          |           | are also provided.                     |            |
 +          +-----------+----------------------------------------+------------+
 |          | __trf__   | Computes an $LU$ factorization of a    | __dgetrf__ |
 |          |           | general matrix, using partial pivoting |            |
 |          |           | with row interchanges.                 |            |
 +          +-----------+----------------------------------------+------------+
 |          | __trs__   | Solves a general system of linear      | __dgetrs__ |
 |          |           | equations $AX=B,$ $A^T X=B,$ or        |            |
 |          |           | $A^H X=B,$ using the  $LU$             |            |
 |          |           | factorization.                         |            |
 +          +-----------+----------------------------------------+------------+
 |          | __tri__   | Computes the inverse of a general      | __dgetri__ |
 |          |           | matrix, using the $LU$ factorization.  |            |
 +----------+-----------+----------------------------------------+------------+
 | Positive | __posv__  | Solves a symmetric positive definite   | __dposv__  |
 | Definite |           | system of linear equations $AX=B.$     |            |
 +          +-----------+----------------------------------------+------------+
 |          | __potrf__ | Computes the Cholesky factorization    | __dpotrf__ |
 |          |           | of a symmetric positive definite       |            |
 |          |           | matrix.                                |            |
 +          +-----------+----------------------------------------+------------+
 |          | __potrs__ | Solves a symmetric positive definite   | __dpotrs__ |
 |          |           | system of linear equations $AX=B,$     |            |
 |          |           | using the Cholesky factorization.      |            |
 +          +-----------+----------------------------------------+------------+
 |          | __potri__ | Computes the inverse of a general      | __dpotri__ |
 |          |           | matrix, using the Cholesky             |            |
 |          |           | factorization.                         |            |
 +----------+-----------+----------------------------------------+------------+
 |Triangular| __trs__   | Solves a triangular system of linear   | __dtrtrs__ |
 |          |           | equations $AX=B,$ $A^T X=B,$ or        |            |
 |          |           | $A^H X=B,$ using the  $LU$             |            |
 |          |           | factorization.                         |            |
 +          +-----------+----------------------------------------+------------+
 |          | __tri__   | Computes the inverse of a triangular   | __dtrtri__ |
 |          |           | matrix, using the $LU$ factorization.  |            |
 +----------+-----------+----------------------------------------+------------+

:links: __(d.+)__  -> file:flens/lapack/interface/ref_lapack/$1.f
        __(.+)__   -> file:flens/lapack/gesv/$1.h


Orthogonal Factorizations
-------------------------
 +-----------+------------------------------------------------+---------------+
 | FLENS     |  DESCRIPTION                                   | LAPACK        |
 +===========+================================================+===============+
 | __qrf__   | Computes a $QR$ factorization of a general     | __dgeqrf__    |
 |           | rectangular matrix.                            |               |
 +-----------+------------------------------------------------+---------------+
 | __qrs__   | Solve the least squares problem                | __dgeqrs[1]__ |
 |           | $\min\| AX - B \|$ using the $QR$ factorization|               |
 +-----------+------------------------------------------------+---------------+
 | __orgqr__ | Generates all or part of the orthogonal matrix | __dorgqr__    |
 |           | $Q$ from a $QR$ factorization.                 |               |
 +-----------+------------------------------------------------+---------------+
 | __ormqr__ | Multiplies a general matrix by the orthogonal  | __dormqr__    |
 |           | matrix from a $QR$ factorization.              |               |
 +-----------+------------------------------------------------+---------------+

:links: __(d.*)\[1\]__  -> file:flens/lapack/test/LIN/$1.f
        __(d.*)__       -> file:flens/lapack/interface/ref_lapack/$1.f
        __(.*)__        -> file:flens/lapack/qr/$1.h


Non-Symmetric Eigenvalue Routines
---------------------------------
 +-----------+---------------------------------------------------+------------+
 | FLENS     |  DESCRIPTION                                      | LAPACK     |
 +===========+===================================================+============+
 | __ev__    | Computes the eigenvalues and left and right       | __dgeev__  |
 |           | eigenvectors of a general matrix.                 |            |
 +-----------+---------------------------------------------------+------------+
 | __evx__   | Computes the eigenvalues and left and right       | __dgeevx__ |
 |           | eigenvectors of a general matrix.  Optionally     |            |
 |           | also, it computes a balancing transformation to   |            |
 |           | improve the conditioning of the eigenvalues and   |            |
 |           | eigenvectors, reciprocal condition numbers        |            |
 |           | for the eigenvalues, and reciprocal condition     |            |
 |           | numbers for the right eigenvectors.               |            |
 +-----------+---------------------------------------------------+------------+
 | __es__    | Computes for a general matrix, the eigenvalues,   | __dgees__  |
 |           | the real Schur form $T$, and, optionally, the     |            |
 |           | matrix of Schur vectors $Z$.  This gives the      |            |
 |           | Schur factorization $A = Z T Z^T.$                |            |
 +-----------+---------------------------------------------------+------------+
 | __esx__   | Like __es__ but optionally, it also orders the    | __dgeesx__ |
 |           | eigenvalues on the diagonal of the  real Schur    |            |
 |           | form so that selected eigenvalues are at the top  |            |
 |           | left; computes a reciprocal condition number for  |            |
 |           | the average of the selected eigenvalues;          |            |
 |           | and computes a reciprocal condition number for    |            |
 |           | the right invariant subspace corresponding to the |            |
 |           | selected eigenvalues.  The leading columns of $Z$ |            |
 |           | form an orthonormal basis for this invariant      |            |
 |           | subspace.                                         |            |
 +-----------+---------------------------------------------------+------------+
 | __hrd__   | Reduces a general matrix to upper Hessenberg form | __dgehrd__ |
 |           | by an orthogonal similarity transformation.       |            |
 +-----------+---------------------------------------------------+------------+
 | __orghr__ | Generates the orthogonal transformation matrix    | __dorghr__ |
 |           | from a reduction to Hessenberg form.              |            |
 +-----------+---------------------------------------------------+------------+

:links: __(d.*)__  -> file:flens/lapack/interface/ref_lapack/$1.f
        __(.*)__   -> file:flens/lapack/eig/$1.h


Todo
====

Of course there many more TODOs.  But theses are the most important:

- Change CXXBLAS such that it produces exactly the same results as __RefBLAS__
- Operator overloading works for most things but needs still needs some work
  and checking.  At the moment we call most of the time the FLENS-BLAS functions
  directly.  Actually that is not that cumbersome.  But once we have overloaded
  operators back we can the FLENS-LAPACK implementation further!

:links: __RefBLAS__  -> http://netlib.org/blas/

