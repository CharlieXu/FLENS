=======================
BLAS Level 1: dot, dotu                                                [TOC:2]
=======================

*dot, dotu* (defined in namespace `flens::blas`) compute vector-vector dot
products:

 - *dot* computes the conjugated dot product $\alpha= \overline{x}^T y =
   \sum\limits_i \overline{x}_i y_i$ and
 - *dotu* the unconjugated dot product $\alpha= x^T y = \sum\limits_i x_i y_i$.

If $x$ and $y$ are both real valued *dot* and $dotu* compute the same value.

*dot* and *dotu* come in two flavors:
 - The so called _subroutine variants_ get an output parameter `result` via
   references.  The precision of the computation is determined by the type of
   the output parameter.  E.g. if elements of $x$ and $y$ have type `float` and
   `result` has type `double` then the accumulation is done in double precision
   and not in single precision.
 - The so called _function variants_ simply return the computed result.  The
   precision is determined by the type of the vector elements of $x$ and $y$.
   In the example above the computation would be carried out in single
   precision.


Subroutine Variants
===================

dot
---
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename X, typename Y, typename T>                            |
|      void                                                                 |
|      dot(const DenseVector<X> &x, const DenseVector<Y> &y, T &result);    |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>3#T#T#Tdot#&1>@N@flens@CT>1#]
                         [T@DenseVector1t0.0#&1>@N@flens@CT>1#T@DenseVector1]
                         [t0.1#&t0.2#templatetypenameXtypenameYtypenameTvoid]

    x               `(input) real or complex valued DenseVector`               +
                    Vector $x$.
    y               `(input) real or complex valued DenseVector`               +
                    Vector $y$.
    result          `(output) real scalar`                                      +
                    On exit, the (conjugated) dot product.


dotu
----
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename X, typename Y, typename T>                            |
|      void                                                                 |
|      dotu(const DenseVector<X> &x, const DenseVector<Y> &y, T &result);   |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>3#T#T#Tdotu#&1>@N@flens@CT>1]
                         [#T@DenseVector1t0.0#&1>@N@flens@CT>1#T@DenseVector]
                         [1t0.1#&t0.2#templatetypenameXtypenameYtypenameTvoi]
                         [d                                                 ]

    x               `(input) real or complex valued DenseVector`               +
                    Vector $x$.
    y               `(input) real or complex valued DenseVector`               +
                    Vector $y$.
    result          `(output) real scalar`                                      +
                    On exit, the (unconjugated) dot product.


Function Variants
=================

dot
---
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename X, typename Y>                                        |
|      typename RestrictTo<IsSame<typename X::ElementType,                  |
|                                 typename Y::ElementType>::value,          |
|                          typename X::ElementType>::Type                   |
|      dot(const DenseVector<X> &x, const DenseVector<Y> &y);               |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tdot#&1>@N@flens@CT>1#T@]
                         [DenseVector1t0.0#&1>@N@flens@CT>1#T@DenseVector1t0]
                         [.1#templatetypenameXtypenameYtypenameRestrictToIsS]
                         [ametypenameXElementTypetypenameYElementTypevaluety]
                         [penameXElementTypeType                            ]

    x               `(input) real or complex valued DenseVector`               +
                    Vector $x$.
    y               `(input) real or complex valued DenseVector`               +
                    Vector $y$.

    *Return value:*

    On exit, the (conjugated) dot product.

dotu
----
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename X, typename Y>                                        |
|      typename RestrictTo<IsSame<typename X::ElementType,                  |
|                                 typename Y::ElementType>::value,          |
|                          typename X::ElementType>::Type                   |
|      dotu(const DenseVector<X> &x, const DenseVector<Y> &y);              |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tdotu#&1>@N@flens@CT>1#T]
                         [@DenseVector1t0.0#&1>@N@flens@CT>1#T@DenseVector1t]
                         [0.1#templatetypenameXtypenameYtypenameRestrictToIs]
                         [SametypenameXElementTypetypenameYElementTypevaluet]
                         [ypenameXElementTypeType                           ]

    x               `(input) real or complex valued DenseVector`               +
                    Vector $x$.
    y               `(input) real or complex valued DenseVector`               +
                    Vector $y$.

    *Return value:*

    On exit, the (unconjugated) dot product.
