==================
BLAS Level 1: copy                                                     [TOC:2]
==================

*copy* (defined in namespace `flens::blas`) copies a vector to another vector,
i.e. $y \leftarrow x$.

We also provide variants for
 - copying matrices, i.e.
    - $B \leftarrow A$,
    - $B \leftarrow A^T$ or
    - $B \leftarrow A^H$,
 - copy-conversion of different matrix types, e.g. copy a matrix of type
   `TrMatrix` to a matrix of type `GeMatrix`.


Vector Variant
==============
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename VX, typename VY>                                      |
|      typename RestrictTo<IsDenseVector<VX>::value                         |
|                       && IsDenseVector<VY>::value,                        |
|               void>::Type                                                 |
|      copy(const VX &x, VY &&y);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameVX,typenameVYtypenameRestrictToIsDenseV]
                         [ectorVXvalueandIsDenseVectorVYvalue,voidType      ]

    x    `(input) real or complex valued DenseVector`                          +
         Vector $x$.
    y    `(output) real or complex valued DenseVector`                         +
         Vector $y$


BLAS Level 1 Extensions
=======================

GeMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeMatrixMAvalueandIsGeMatrixMBva]
                         [lue,voidType                                      ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeMatrix`                         +
             Matrix $A$.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$.


HeMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeMatrix<MA>::value                            |
|                       && IsHeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHeMatr]
                         [ixMAvalueandIsHeMatrixMBvalue,voidType            ]

    A        `(input) real or complex valued HeMatrix`                         +
             Hermitian matrix $A$.
    B        `(output) real or complex valued HeMatrix`                        +
             Hermitian matrix $B$.


TrMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTrMatrix<MA>::value                            |
|                       && IsTrMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsTrMatrixMAvalueandIsTrMatrixMBva]
                         [lue,voidType                                      ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued TrMatrix`                         +
             Triangular matrix $A$.
    B        `(output) real or complex valued TrMatrix`                        +
             Triangular matrix $B$.



SyMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyMatrix<MA>::value                            |
|                       && IsSyMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSyMatr]
                         [ixMAvalueandIsSyMatrixMBvalue,voidType            ]

    A        `(input) real or complex valued SyMatrix`                         +
             Symmetric matrix $A$.
    B        `(output) real or complex valued SyMatrix`                        +
             Symmetric matrix $B$.


Sparse BLAS
===========

Compress: GeCoordMatrix to GeCCSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCoordMatrix<MA>::value                       |
|                       && IsGeCCSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeCoordMatrixMAvalueandIsGeCCSMa]
                         [trixMBvalue,voidType                              ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCoordMatrix`                    +
             Sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued GeCCSMatrix`                     +
             Sparse matrix $B$ in compressed row storage format.


Compress: HeCoordMatrix to HeCCSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCoordMatrix<MA>::value                       |
|                       && IsHeCCSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHeCoor]
                         [dMatrixMAvalueandIsHeCCSMatrixMBvalue,voidType    ]

    A        `(input) real or complex valued HeCoordMatrix`                    +
             Hermitian sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued HeCCSMatrix`                     +
             Hermitian sparse matrix $B$ in compressed column storage format.


Compress: SyCoordMatrix to SyCCSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCoordMatrix<MA>::value                       |
|                       && IsSyCCSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSyCoor]
                         [dMatrixMAvalueandIsSyCCSMatrixMBvalue,voidType    ]

    A        `(input) real or complex valued SyCoordMatrix`                    +
             Symmetric sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued SyCCSMatrix`                     +
             Symmetric sparse matrix $B$ in compressed column storage format.


Compress: GeCoordMatrix to GeCRSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCoordMatrix<MA>::value                       |
|                       && IsGeCRSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeCoordMatrixMAvalueandIsGeCRSMa]
                         [trixMBvalue,voidType                              ]

   trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCoordMatrix`                    +
             Sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued GeCRSMatrix`                     +
             Sparse matrix $B$ in compressed row storage format.


Compress: HeCoordMatrix to HeCRSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCoordMatrix<MA>::value                       |
|                       && IsHeCRSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHeCoor]
                         [dMatrixMAvalueandIsHeCRSMatrixMBvalue,voidType    ]

    A        `(input) real or complex valued HeCoordMatrix`                    +
             Hermitian sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued HeCRSMatrix`                     +
             Hermitian sparse matrix $B$ in compressed row storage format.


Compress: SyCoordMatrix to SyCRSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCoordMatrix<MA>::value                       |
|                       && IsSyCRSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSyCoor]
                         [dMatrixMAvalueandIsSyCRSMatrixMBvalue,voidType    ]

    A        `(input) real or complex valued SyCoordMatrix`                    +
             Symmetric sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued SyCRSMatrix`                     +
             Symmetric sparse matrix $B$ in compressed row storage format.


Convenience Extensions
======================
The following copy variant convert different matrix types to a `GeMatrix`.
This can be handy for debiugging of fast prototyping.


SyMatrix to GeMatrix
--------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSyMatr]
                         [ixMAvalueandIsGeMatrixMBvalue,voidType            ]

    A        `(input) real or complex valued SyMatrix`                         +
             Symmetric matrix $A$.
    B        `(output) real or complex valued SyMatrix`                        +
             Matrix $B$.


TrMatrix to GeMatrix
--------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTrMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsTrMatrixMAvalueandIsGeMatrixMBva]
                         [lue,voidType                                      ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued TrMatrix`                         +
             Triangular matrix $A$.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$.


Densify: GeCoordMatrix to GeMatrix
----------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCoordMatrix<MA>::value                       |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeCoordMatrixMAvalueandIsGeMatri]
                         [xMBvalue,voidType                                 ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCoordMatrix`                    +
             Sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$ in full storage format.



Densify: GeCCSMatrix to GeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCCSMatrix<MA>::value                         |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeCCSMatrixMAvalueandIsGeMatrixM]
                         [Bvalue,voidType                                   ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCCSMatrix`                      +
             Sparse matrix $A$ stored in the compressed column format.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$ in full storage format.


Densify: HeCCSMatrix to HeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCCSMatrix<MA>::value                         |
|                       && IsHeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHeCCSM]
                         [atrixMAvalueandIsHeMatrixMBvalue,voidType         ]

    A        `(input) real or complex valued HeCCSMatrix`                      +
             Hermitian sparse matrix $A$ stored in the compressed column format.
    B        `(output) real or complex valued HeMatrix`                        +
             Hermitian matrix $B$ in full storage format.


Densify: SyCCSMatrix to HeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCCSMatrix<MA>::value                         |
|                       && IsSyMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSyCCSM]
                         [atrixMAvalueandIsSyMatrixMBvalue,voidType         ]

    A        `(input) real or complex valued SyCCSMatrix`                      +
             Symmetric sparse matrix $A$ stored in the compressed column format.
    B        `(output) real or complex valued HeMatrix`                        +
             Symmetrix matrix $B$ in full storage format.

Densify: GeCRSMatrix to GeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCRSMatrix<MA>::value                         |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeCRSMatrixMAvalueandIsGeMatrixM]
                         [Bvalue,voidType                                   ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCRSMatrix`                      +
             Sparse matrix $A$ stored in the compressed row format.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$ in full storage format.


Densify: HeCRSMatrix to HeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCRSMatrix<MA>::value                         |
|                       && IsHeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHeCRSM]
                         [atrixMAvalueandIsHeMatrixMBvalue,voidType         ]

    A        `(input) real or complex valued HeCRSMatrix`                      +
             Hermitian sparse matrix $A$ stored in the compressed row format.
    B        `(output) real or complex valued HeMatrix`                        +
             Hermitian matrix $B$ in full storage format.

Densify: SyCRSMatrix to SyMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCRSMatrix<MA>::value                         |
|                       && IsSyMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSyCRSM]
                         [atrixMAvalueandIsSyMatrixMBvalue,voidType         ]

    A        `(input) real or complex valued SyCRSMatrix`                      +
             Symmetric sparse matrix $A$ stored in the compressed row format.
    B        `(output) real or complex valued SyMatrix`                        +
             Symmetric matrix $B$ in full storage format.

################################################################################
#
#  The following CODEREFs are automatically created stubs.
#
################################################################################


*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename VX, typename VY>                                      |
|      typename RestrictTo<IsTinyVector<VX>::value                          |
|                       && IsTinyVector<VY>::value,                         |
|               void>::Type                                                 |
|      copy(const VX &x, VY &&y);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameVX,typenameVYtypenameRestrictToIsTinyVe]
                         [ctorVXvalueandIsTinyVectorVYvalue,voidType        ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeTinyMatrix<MA>::value                        |
|                       && IsGeTinyMatrix<MB>::value,                       |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsGeTinyMatrixMAvalueandIsGeTinyMa]
                         [trixMBvalue,voidType                              ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHpMatrix<MA>::value                            |
|                       && IsHpMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsHpMatrixMAvalueandIsHpMatrixMBva]
                         [lue,voidType                                      ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSpMatrix<MA>::value                            |
|                       && IsSpMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsSpMatrixMAvalueandIsSpMatrixMBva]
                         [lue,voidType                                      ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTbMatrix<MA>::value                            |
|                       && IsTbMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsTbMatrixMAvalueandIsTbMatrixMBva]
                         [lue,voidType                                      ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTpMatrix<MA>::value                            |
|                       && IsTpMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsTpMatrixMAvalueandIsTpMatrixMBva]
                         [lue,voidType                                      ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHbMatrix<MA>::value                            |
|                       && IsGbMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHbMatr]
                         [ixMAvalueandIsGbMatrixMBvalue,voidType            ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsHeMatr]
                         [ixMAvalueandIsGeMatrixMBvalue,voidType            ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSbMatrix<MA>::value                            |
|                       && IsGbMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMA,typenameMBtypenameRestrictToIsSbMatr]
                         [ixMAvalueandIsGbMatrixMBvalue,voidType            ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTbMatrix<MA>::value                            |
|                       && IsGbMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMA,typenameMBty]
                         [penameRestrictToIsTbMatrixMAvalueandIsGbMatrixMBva]
                         [lue,voidType                                      ]

    Defined in namespace `flens::blas`.
    Function `copy` with 2 template parameters.



