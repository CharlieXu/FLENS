==================
BLAS Level 1: copy                                                     [TOC:2]
==================

*copy* (defined in namespace `flens::blas`) copies a vector to another vector,
i.e. $y \leftarrow x$.

We also provide variants for
 - copying matrices, i.e.
    - $B \leftarrow A$,
    - $B \leftarrow A^T$ or
    - $B \leftarrow A^H$,
 - copy-conversion of different matrix types, e.g. copy a matrix of type
   `TrMatrix` to a matrix of type `GeMatrix`.


Vector Variant
==============
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename VX, typename VY>                                      |
|      typename RestrictTo<IsDenseVector<VX>::value                         |
|                       && IsDenseVector<VY>::value,                        |
|               void>::Type                                                 |
|      copy(const VX &x, VY &&y);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameVXtypenameVYtypenameRestrictToIsDenseVe]
                         [ctorVXvalueIsDenseVectorVYvaluevoidType           ]

    x    `(input) real or complex valued DenseVector`                          +
         Vector $x$.
    y    `(output) real or complex valued DenseVector`                         +
         Vector $y$


BLAS Level 1 Extensions
=======================

GeMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsGeMatrixMAvalueIsGeMatrixMBvaluev]
                         [oidType                                           ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeMatrix`                         +
             Matrix $A$.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$.


HeMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeMatrix<MA>::value                            |
|                       && IsHeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsHeMatri]
                         [xMAvalueIsHeMatrixMBvaluevoidType                 ]

    A        `(input) real or complex valued HeMatrix`                         +
             Hermitian matrix $A$.
    B        `(output) real or complex valued HeMatrix`                        +
             Hermitian matrix $B$.


TrMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTrMatrix<MA>::value                            |
|                       && IsTrMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsTrMatrixMAvalueIsTrMatrixMBvaluev]
                         [oidType                                           ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued TrMatrix`                         +
             Triangular matrix $A$.
    B        `(output) real or complex valued TrMatrix`                        +
             Triangular matrix $B$.



SyMatrix
--------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyMatrix<MA>::value                            |
|                       && IsSyMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsSyMatri]
                         [xMAvalueIsSyMatrixMBvaluevoidType                 ]

    A        `(input) real or complex valued SyMatrix`                         +
             Symmetric matrix $A$.
    B        `(output) real or complex valued SyMatrix`                        +
             Symmetric matrix $B$.


Sparse BLAS
===========

Compress: GeCoordMatrix to GeCCSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCoordMatrix<MA>::value                       |
|                       && IsGeCCSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsGeCoordMatrixMAvalueIsGeCCSMatrix]
                         [MBvaluevoidType                                   ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCoordMatrix`                    +
             Sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued GeCCSMatrix`                     +
             Sparse matrix $B$ in compressed row storage format.


Compress: HeCoordMatrix to HeCCSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCoordMatrix<MA>::value                       |
|                       && IsHeCCSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsHeCoord]
                         [MatrixMAvalueIsHeCCSMatrixMBvaluevoidType         ]

    A        `(input) real or complex valued HeCoordMatrix`                    +
             Hermitian sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued HeCCSMatrix`                     +
             Hermitian sparse matrix $B$ in compressed column storage format.


Compress: SyCoordMatrix to SyCCSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCoordMatrix<MA>::value                       |
|                       && IsSyCCSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsSyCoord]
                         [MatrixMAvalueIsSyCCSMatrixMBvaluevoidType         ]

    A        `(input) real or complex valued SyCoordMatrix`                    +
             Symmetric sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued SyCCSMatrix`                     +
             Symmetric sparse matrix $B$ in compressed column storage format.


Compress: GeCoordMatrix to GeCRSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCoordMatrix<MA>::value                       |
|                       && IsGeCRSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsGeCoordMatrixMAvalueIsGeCRSMatrix]
                         [MBvaluevoidType                                   ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCoordMatrix`                    +
             Sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued GeCRSMatrix`                     +
             Sparse matrix $B$ in compressed row storage format.


Compress: HeCoordMatrix to HeCRSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCoordMatrix<MA>::value                       |
|                       && IsHeCRSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsHeCoord]
                         [MatrixMAvalueIsHeCRSMatrixMBvaluevoidType         ]

    A        `(input) real or complex valued HeCoordMatrix`                    +
             Hermitian sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued HeCRSMatrix`                     +
             Hermitian sparse matrix $B$ in compressed row storage format.


Compress: SyCoordMatrix to SyCRSMatrix
--------------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCoordMatrix<MA>::value                       |
|                       && IsSyCRSMatrix<MB>::value,                        |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsSyCoord]
                         [MatrixMAvalueIsSyCRSMatrixMBvaluevoidType         ]

    A        `(input) real or complex valued SyCoordMatrix`                    +
             Symmetric sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued SyCRSMatrix`                     +
             Symmetric sparse matrix $B$ in compressed row storage format.


Convenience Extensions
======================
The following copy variant convert different matrix types to a `GeMatrix`.
This can be handy for debiugging of fast prototyping.


SyMatrix to GeMatrix
--------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsSyMatri]
                         [xMAvalueIsGeMatrixMBvaluevoidType                 ]

    A        `(input) real or complex valued SyMatrix`                         +
             Symmetric matrix $A$.
    B        `(output) real or complex valued SyMatrix`                        +
             Matrix $B$.


TrMatrix to GeMatrix
--------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsTrMatrix<MA>::value                            |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsTrMatrixMAvalueIsGeMatrixMBvaluev]
                         [oidType                                           ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued TrMatrix`                         +
             Triangular matrix $A$.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$.


Densify: GeCoordMatrix to GeMatrix
----------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCoordMatrix<MA>::value                       |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsGeCoordMatrixMAvalueIsGeMatrixMBv]
                         [aluevoidType                                      ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCoordMatrix`                    +
             Sparse matrix $A$ stored in the coordinate format.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$ in full storage format.



Densify: GeCCSMatrix to GeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCCSMatrix<MA>::value                         |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsGeCCSMatrixMAvalueIsGeMatrixMBval]
                         [uevoidType                                        ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCCSMatrix`                      +
             Sparse matrix $A$ stored in the compressed column format.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$ in full storage format.


Densify: HeCCSMatrix to HeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCCSMatrix<MA>::value                         |
|                       && IsHeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsHeCCSMa]
                         [trixMAvalueIsHeMatrixMBvaluevoidType              ]

    A        `(input) real or complex valued HeCCSMatrix`                      +
             Hermitian sparse matrix $A$ stored in the compressed column format.
    B        `(output) real or complex valued HeMatrix`                        +
             Hermitian matrix $B$ in full storage format.


Densify: SyCCSMatrix to HeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCCSMatrix<MA>::value                         |
|                       && IsSyMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsSyCCSMa]
                         [trixMAvalueIsSyMatrixMBvaluevoidType              ]

    A        `(input) real or complex valued SyCCSMatrix`                      +
             Symmetric sparse matrix $A$ stored in the compressed column format.
    B        `(output) real or complex valued HeMatrix`                        +
             Symmetrix matrix $B$ in full storage format.

Densify: GeCRSMatrix to GeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsGeCRSMatrix<MA>::value                         |
|                       && IsGeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(Transpose trans, const MA &A, MB &&B);                          |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#$@N@cxxblas@E@Tran]
                         [spose#&1t0.0#&t0.1#templatetypenameMAtypenameMBtyp]
                         [enameRestrictToIsGeCRSMatrixMAvalueIsGeMatrixMBval]
                         [uevoidType                                        ]

    trans    `(input)`                                                         +
             Specifiy the operation, i.e.
              NoTrans      $B \leftarrow A$
              Trans        $B \leftarrow A^T$
              ConjTrans    $B \leftarrow A^H$
    A        `(input) real or complex valued GeCRSMatrix`                      +
             Sparse matrix $A$ stored in the compressed row format.
    B        `(output) real or complex valued GeMatrix`                        +
             Matrix $B$ in full storage format.


Densify: HeCRSMatrix to HeMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsHeCRSMatrix<MA>::value                         |
|                       && IsHeMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsHeCRSMa]
                         [trixMAvalueIsHeMatrixMBvaluevoidType              ]

    A        `(input) real or complex valued HeCRSMatrix`                      +
             Hermitian sparse matrix $A$ stored in the compressed row format.
    B        `(output) real or complex valued HeMatrix`                        +
             Hermitian matrix $B$ in full storage format.

Densify: SyCRSMatrix to SyMatrix
--------------------------------
*--[CODEREF]----------------------------------------------------------------*
|                                                                           |
|  template <typename MA, typename MB>                                      |
|      typename RestrictTo<IsSyCRSMatrix<MA>::value                         |
|                       && IsSyMatrix<MB>::value,                           |
|               void>::Type                                                 |
|      copy(const MA &A, MB &&B);                                           |
|                                                                           |
*---------------------------------------------------------------------------*
                         [c:@N@flens@N@blas@FT@>2#T#Tcopy#&1t0.0#&t0.1#templ]
                         [atetypenameMAtypenameMBtypenameRestrictToIsSyCRSMa]
                         [trixMAvalueIsSyMatrixMBvaluevoidType              ]

    A        `(input) real or complex valued SyCRSMatrix`                      +
             Symmetric sparse matrix $A$ stored in the compressed row format.
    B        `(output) real or complex valued SyMatrix`                        +
             Symmetric matrix $B$ in full storage format.

