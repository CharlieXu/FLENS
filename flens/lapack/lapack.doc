===========================
FLENS-LAPACK Implementation                                             [TOC]
===========================

At the moment we are working on a C++ port of __LAPACK__.  *Sound tedious?  It
is a joy with FLENS*!  This is because FLENS gives you easy-to-use tools for
implementing efficient, robust and reliable numerical software.

:links:  __LAPACK__ -> http://www.netlib.org/lapack/


Purpose
=======
FLENS is a comfortable tool for the implementation of numerical algorithms.  At
the same time we avoid negative impacts on efficiency due to abstraction.  But
only claiming that we can achieve this two goals is one thing.  The other thing
is proving this!  In this respect you could regard the FLENS-LAPACK as a
prove of our claims.  So our FLENS-LAPACK port demonstrates the following
features:

  - *Easy to read and understand*

    There are many C++ libraries that implement LAPACK functionality.  But when
    you look at their code it is often hard to even recognize the underlying
    algorithm.  It is like the algorithm gets lost in all these C++ template
    tricks and tweaks.

    The Fortan implementation of LAPACK is much easier to read and understand.
    Even if you are not very familiar with Fortran!  Well, maybe there is one
    drawback.  As there are now actual matrix/vector types many parameters
    have to be passed to LAPACK routines.  This is sometime error-prone and
    hard to read.

    Anyway, the FLENS-LAPACK implementation of these algorithms is *really*
    readable.

  - *Same results as the Fortran Implementation of LAPACK*

    LAPACK is the king in the numerical software field,established and well
    tested.  Our implementation is intended to produce exactly the same results
    as the Fortran LAPACK (Version 3.3.1).  As long as the same BLAS
    implementation gets used.  And with *exactly the same results* we mean that
    we even produce the same roundoff errors.

  - *Same performance as the Fortran implementation of LAPACK*

    While we have not begun with benchmarking we are confident that in the
    end we achieve the same performance as the Fortran LAPACK.  Again under
    the assumption that in both cases the same BLAS implementation is used.

  - *CXXBLAS*

    We provide a generic BLAS implementation that gets called if no native
    BLAS implementation like __ATLAS__, __GotoBLAS__ or __OpenBLAS__ is
    available or if the involved data types are not supported.

    While CXXBLAS currently passes all BLAS test we plan to modify its
    implementation such that it produces exactly the same results as
    the BLAS reference implementation.

    Due to CXXBLAS the FLENS-LAPACK routines can be used with data types from
    C++ multi-precision libraries.

:links: __ATLAS__    -> http://math-atlas.sourceforge.net/
        __GotoBLAS__ -> http://www.tacc.utexas.edu/tacc-projects/gotoblas2
        __OpenBLAS__ -> http://xianyi.github.com/OpenBLAS/

Current Status
==============
While it is a joy to port LAPACK to C++ we are still far from complete.  And
as we require that the resulting implementation is readable and understandable
we can not completely automate the process:

  - The Fortran implementation of LAPACK uses a lot of `goto` statements.  In
    our implementation we try to avoid them were possible and appropriate.
  - ... and other reasons.

At the moment we focus on porting LAPACK routines were data types are real and
the involved matrix types have full storage:

  - We picked LAPACK routines for double precision and turned them in generic
    C++ code that uses FLENS matrix/vector types.  While they should also work
    in single and multi-precision we have not tested this so far.
  - Involved FLENS matrix types are `GeMatrix`, `TrMatrix` and `SyMatrix`
    and FLENS vector type `DenseVector`.
  - As the LAPACK naming is well known we stick with it in our port.  However,
    we removed letters from the function names that merely specify the argument
    types.  For example, the LAPACK functions __dgetrs__ and __dtrtrs__ resulted
    in the FLENS-LAPACK function __trs__ which is overloaded for `GeMatrix` and
    `TrMatrix`.
  - All LAPACK routines are located in directory __flens/lapack__ and loosely
    grouped in subdiretories:
     - __aux__ contains various auxiliary routines
     - __eig__ contains routines most relevant for the computation of
       eigenvalues and eigenvectors,
     - __gesv__ for solving systems of linear equations and
     - __qr__ for computing the QR factorization.

:links:  __dgetrs__        -> file:flens/lapack/interface/ref_lapack/dgetrs.f
         __dtrtrs__        -> file:flens/lapack/interface/ref_lapack/dtrtrs.f
         __trs__           -> file:flens/lapack/gesv/trs.h
         __flens/lapack__  -> dir:flens/lapack/
         __(.+)__          -> dir:flens/lapack/$1/

But before you get lost in the details you might be interested in the following
LAPACK driver routines that are currently implemented in FLENS.

Linear Equation Routines
------------------------
 +----------+-----------+----------------------------------------+------------+
 | TYPE     | FLENS     | DESCRIPTION                            | LAPACK     |
 +==========+===========+========================================+============+
 | General  | __sv__    | Solves a general system of linear      | __dgesv__  |
 |          |           | equations $AX=B$.                      |            |
 |          |           |                                        |            |
 |          |           | *Example:*  __lapack-gesv__.           |            |
 +          +-----------+----------------------------------------+------------+
 |          | __svx__   | Solves a general system of linear      | __dgesvx__ |
 |          |           | equations $AX=B$.  Error bounds on     |            |
 |          |           | the solution and a condition estimate  |            |
 |          |           | are also provided.                     |            |
 +          +-----------+----------------------------------------+------------+
 |          | __trf__   | Computes an $LU$ factorization of a    | __dgetrf__ |
 |          |           | general matrix, using partial pivoting |            |
 |          |           | with row interchanges.                 |            |
 |          |           |                                        |            |
 |          |           | *Example:*  __lapack-getrf__.          |            |
 +          +-----------+----------------------------------------+------------+
 |          | __trs__   | Solves a general system of linear      | __dgetrs__ |
 |          |           | equations $AX=B,$ $A^T X=B,$ or        |            |
 |          |           | $A^H X=B,$ using the  $LU$             |            |
 |          |           | factorization.                         |            |
 +          +-----------+----------------------------------------+------------+
 |          | __tri__   | Computes the inverse of a general      | __dgetri__ |
 |          |           | matrix, using the $LU$ factorization.  |            |
 +----------+-----------+----------------------------------------+------------+
 | Positive | __posv__  | Solves a symmetric positive definite   | __dposv__  |
 | Definite |           | system of linear equations $AX=B.$     |            |
 +          +-----------+----------------------------------------+------------+
 |          | __potrf__ | Computes the Cholesky factorization    | __dpotrf__ |
 |          |           | of a symmetric positive definite       |            |
 |          |           | matrix.                                |            |
 +          +-----------+----------------------------------------+------------+
 |          | __potrs__ | Solves a symmetric positive definite   | __dpotrs__ |
 |          |           | system of linear equations $AX=B,$     |            |
 |          |           | using the Cholesky factorization.      |            |
 +          +-----------+----------------------------------------+------------+
 |          | __potri__ | Computes the inverse of a general      | __dpotri__ |
 |          |           | matrix, using the Cholesky             |            |
 |          |           | factorization.                         |            |
 +----------+-----------+----------------------------------------+------------+
 |Triangular| __trs__   | Solves a triangular system of linear   | __dtrtrs__ |
 |          |           | equations $AX=B,$ $A^T X=B,$ or        |            |
 |          |           | $A^H X=B,$ using the  $LU$             |            |
 |          |           | factorization.                         |            |
 +          +-----------+----------------------------------------+------------+
 |          | __tri__   | Computes the inverse of a triangular   | __dtrtri__ |
 |          |           | matrix, using the $LU$ factorization.  |            |
 +----------+-----------+----------------------------------------+------------+

:links: __lapack-gesv__  -> doc:flens/examples/tut04-page03
        __lapack-getrf__ -> doc:flens/examples/tut04-page01
        __(d.+)__        -> file:flens/lapack/interface/ref_lapack/$1.f
        __(.+)__         -> file:flens/lapack/gesv/$1.h


Orthogonal Factorizations
-------------------------
 +-----------+------------------------------------------------+---------------+
 | FLENS     |  DESCRIPTION                                   | LAPACK        |
 +===========+================================================+===============+
 | __qrf__   | Computes a $QR$ factorization of a general     | __dgeqrf__    |
 |           | rectangular matrix.                            |               |
 |           |                                                |               |
 |           | *Example:*  __lapack-geqrf__.                  |               |
 +-----------+------------------------------------------------+---------------+
 | __qrs__   | Solve the least squares problem                | __dgeqrs[1]__ |
 |           | $\min\| AX - B \|$ using the $QR$ factorization|               |
 +-----------+------------------------------------------------+---------------+
 | __orgqr__ | Generates all or part of the orthogonal matrix | __dorgqr__    |
 |           | $Q$ from a $QR$ factorization.                 |               |
 +-----------+------------------------------------------------+---------------+
 | __ormqr__ | Multiplies a general matrix by the orthogonal  | __dormqr__    |
 |           | matrix from a $QR$ factorization.              |               |
 +-----------+------------------------------------------------+---------------+

:links: __lapack-geqrf__ -> doc:flens/examples/tut04-page02
        __(d.*)\[1\]__   -> file:flens/lapack/test/LIN/$1.f
        __(d.*)__        -> file:flens/lapack/interface/ref_lapack/$1.f
        __(.*)__         -> file:flens/lapack/qr/$1.h


Non-Symmetric Eigenvalue Routines
---------------------------------
 +-----------+---------------------------------------------------+------------+
 | FLENS     |  DESCRIPTION                                      | LAPACK     |
 +===========+===================================================+============+
 | __ev__    | Computes the eigenvalues and left and right       | __dgeev__  |
 |           | eigenvectors of a general matrix.                 |            |
 |           |                                                   |            |
 |           | *Example:*  __lapack-geev__.                      |            |
 +-----------+---------------------------------------------------+------------+
 | __evx__   | Computes the eigenvalues and left and right       | __dgeevx__ |
 |           | eigenvectors of a general matrix.  Optionally     |            |
 |           | also, it computes a balancing transformation to   |            |
 |           | improve the conditioning of the eigenvalues and   |            |
 |           | eigenvectors, reciprocal condition numbers        |            |
 |           | for the eigenvalues, and reciprocal condition     |            |
 |           | numbers for the right eigenvectors.               |            |
 +-----------+---------------------------------------------------+------------+
 | __es__    | Computes for a general matrix, the eigenvalues,   | __dgees__  |
 |           | the real Schur form $T$, and, optionally, the     |            |
 |           | matrix of Schur vectors $Z$.  This gives the      |            |
 |           | Schur factorization $A = Z T Z^T.$                |            |
 +-----------+---------------------------------------------------+------------+
 | __esx__   | Like __es__ but optionally, it also orders the    | __dgeesx__ |
 |           | eigenvalues on the diagonal of the  real Schur    |            |
 |           | form so that selected eigenvalues are at the top  |            |
 |           | left; computes a reciprocal condition number for  |            |
 |           | the average of the selected eigenvalues;          |            |
 |           | and computes a reciprocal condition number for    |            |
 |           | the right invariant subspace corresponding to the |            |
 |           | selected eigenvalues.  The leading columns of $Z$ |            |
 |           | form an orthonormal basis for this invariant      |            |
 |           | subspace.                                         |            |
 +-----------+---------------------------------------------------+------------+
 | __hrd__   | Reduces a general matrix to upper Hessenberg form | __dgehrd__ |
 |           | by an orthogonal similarity transformation.       |            |
 +-----------+---------------------------------------------------+------------+
 | __orghr__ | Generates the orthogonal transformation matrix    | __dorghr__ |
 |           | from a reduction to Hessenberg form.              |            |
 +-----------+---------------------------------------------------+------------+

:links: __lapack-geev__ -> doc:flens/examples/tut04-page04
        __(d.*)__       -> file:flens/lapack/interface/ref_lapack/$1.f
        __(.*)__        -> file:flens/lapack/eig/$1.h


Todo
====

Of course there many more TODOs.  But theses are the most important:

- Change CXXBLAS such that it produces exactly the same results as __RefBLAS__
- Operator overloading works for most things but needs still needs some work
  and checking.  At the moment we call most of the time the FLENS-BLAS functions
  directly.  Actually that is not that cumbersome.  But once we have overloaded
  operators back we can the FLENS-LAPACK implementation further!

:links: __RefBLAS__  -> http://netlib.org/blas/


Related Projects
================

- __LAPACK__ itself of course.
- __mpack__ which is also a generic C++ port of LAPACK.  To our knowledge the
  following strategy gets used for porting LAPACK:
     - __f2c__ is used to create a C implementation of LAPACK
     - Various scripts (the magic ingredient) are used to create a generic C++
       implementation from the C code.
  This approach has both, advantages and (depending on your own goals)
  disadvantages:
     - *Pros:*  You have a complete generic C++ port of LAPACK that supports
       various multiple precision arithmetic libraries like __GMP__, __MPFR__
       and __QD__.
     - *Cons:*  The automatic generated code is hard to read (as is typical for
       f2c-generated code).

:links:  __LAPACK__ -> http://www.netlib.org/lapack/
         __mpack__  -> http://mplapack.sourceforge.net/
         __f2c__    -> http://en.wikipedia.org/wiki/F2c
         __GMP__    -> http://gmplib.org/
         __MPFR__   -> http://www.mpfr.org/
         __QD__     -> http://crd-legacy.lbl.gov/~dhbailey/mpdist/
