======================================
Accessing Raw Data Pointers and Stride                                  [TOC]
======================================

Assuming you know what you are doing FLENS gives you direct access to the raw
data of its matrix/vector types.  One application is interfacing with other
libraries.  For example BLAS, LAPACK, etc.

But also for the implementation of efficient numerical you often don't want to
use dynamic memory allocation.  Using memory from the stack or data segment is
free, i.e. has no runtime overhead.  While dynamic memory allocation can be
expensive in some cases.  Hence common task in writing efficient numerical code
involves:

  - Creating a matrix/vector inside a function that uses a small, local buffer
    from the stack.

  - Creating a matrix/vector that uses a global buffer from the data segment.

Numerical applications will be shown in later sections.  In the following we
just address the technical details on how to accomplish these tasks.


Accessing Raw Data form Vectors and Matrices
============================================


How you NOT want to do it
=========================
Consider a small core routine of a numerical application that is used to operate
on small matrix blocks.  The function itself does only a few computations but
gets called many times.  For intermediate results a small buffer is needed. In
this case dynamic memory allocation can have a considerable impact on runtime.

So you *DO NOT* want an implementation of this type:

:import: flens/examples/tut01-page02-example2.cc [stripped, downloadable]


Using a Stack Buffer for Matrix/Vector Views
============================================
If the buffer size is known at compile time (which is often the case for these
kind of routines) you want to use a buffer on the stack.  Allocating the buffer
is free in this case.

You than can use matrix/vector views as an interface for working on the buffer.
In many cases you even want to use the buffer as matrix as well as a vector at
the same time.

So this is *how to do it*:

:import: flens/examples/tut01-page02-example3.cc [stripped, downloadable]



Using a Global Buffer for Matrix/Vector Views
=============================================



:navigate: __up__    -> doc:flens/examples/tutorial
           __back__  -> doc:flens/examples/tut01-page02
           __next__  -> doc:flens/examples/tut01-page04


